name: keeper_deploy
on:
  push:
    branches:
      - 'main'
      - 'release'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 18 ]

    steps:
      - name: Copy repository
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set Env based on branch
        run: |
          cd keeper/config
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ln -sfn config.dev.yaml config.yaml
            echo "TARGET_HOST=${{ vars.TARGET_HOST_DEV }}" >> $GITHUB_ENV
            echo "INSTANCE_NUM=${{ vars.KEEPER_INSTANCE_NUM_DEV }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/release" ]; then
            ln -sfn config.release.yaml config.yaml
            echo "TARGET_HOST=${{ vars.TARGET_HOST_KEEPER_RELEASE }}" >> $GITHUB_ENV
            echo "INSTANCE_NUM=${{ vars.KEEPER_INSTANCE_NUM_RELEASE }}" >> $GITHUB_ENV
          else
            echo "Unsupported branch for this action. Exiting..."
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: momo-movement-keeper
#          IMAGE_TAG: 1.0.${{ github.run_number }}
#        run: |
#          docker build -f Dockerfile.keeper -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: SSH and Deploy via Jump Host
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.JUMP_HOST }}
          username: ${{ vars.JUMP_USERNAME }}
          key: ${{ secrets.JUMP_CREDENTIAL }}
          port: 22
          command_timeout: 30m
          script: |
            ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY=momo-movement-keeper
            IMAGE_TAG=1.0.12
            FIRST_IP=$(echo "${{ env.TARGET_HOST }}" | cut -d' ' -f1)
            INSTANCE_NUM=${{  env.INSTANCE_NUM  }}
            ssh ${{ vars.TARGET_USERNAME }}@$FIRST_IP << EOF
              ECR_REGISTRY=$ECR_REGISTRY
              ECR_REPOSITORY=$ECR_REPOSITORY
              IMAGE_TAG=$IMAGE_TAG
              INSTANCE_NUM=$INSTANCE_NUM
            
              aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
              echo "final: \$ECR_REGISTRY/\$ECR_REPOSITORY:\$IMAGE_TAG \$INSTANCE_NUM"
              docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            
              echo "Starting for loop with INSTANCE_NUM=\$INSTANCE_NUM"
              for ((i=1;i<=\$INSTANCE_NUM;i++); do
                echo "Inside for loop, iteration \$i"
                INSTANCE_NAME="${ECR_REPOSITORY}_${i}"
                echo "Stopping and removing instance \$INSTANCE_NAME if exists..."
                docker stop $INSTANCE_NAME || true
                docker rm $INSTANCE_NAME || true
                echo "Running instance \$INSTANCE_NAME..."
                docker run -dit --name $INSTANCE_NAME --log-opt max-size=50m --log-opt max-file=2 --restart unless-stopped -e INSTANCE_ID=$i $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              done
              echo "For loop completed"
            
              docker system prune -fa
              docker image prune -af
            EOF
